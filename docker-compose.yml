version: '3.7'
services:

  # Postgres order database
  postgres-order:
    container_name: postgres-order
    image: postgres
    environment:
      POSTGRES_DB: order-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./resources/postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    restart: always

  # Postgres inventory database
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - ./resources/postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: always

  # pgAdmin
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: user@domain.com
      PGADMIN_DEFAULT_PASSWORD: password
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - ./resources/pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    restart: unless-stopped

  # KeyCloak
  keycloak-mysql:
    container_name: keycloak-mysql
    image: mysql:5.7
    volumes:
      - ./resources/mysql_keycloak_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: keycloak
      MYSQL_USER: keycloak
      MYSQL_PASSWORD: password
  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:20.0.3
    command: [ "start-dev", "--import-realm" ]
    environment:
      DB_VENDOR: MYSQL
      DB_ADDR: mysql
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: password
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./resources/realms/:/opt/keycloak/data/import/
    depends_on:
      - keycloak-mysql

  # Kafta
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  # Discovery server
  discovery-server:
    container_name: discovery-server
    image: kimgoetzke/practice-microservices:discovery-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761" ]
      interval: 10s
      timeout: 3s
      retries: 10


  # Config server
  config-server:
    container_name: config-server
    image: kimgoetzke/practice-microservices:config-server
    ports:
      - "8888:8888"
    expose:
      - "8888"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      keycloak:
        condition: service_started
      discovery-server:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-I", "http://config-server:8888" ]
      interval: 5s
      timeout: 3s
      retries: 10

  # API gateway
  api-gateway:
    container_name: api-gateway
    image: kimgoetzke/practice-microservices:api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=DEBUG
    depends_on:
      config-server:
        condition: service_healthy

  # Notification service
  product-service:
    container_name: notification-service
    image: kimgoetzke/practice-microservices:notification-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka
    depends_on:
      api-gateway:
        condition: service_started

  # Order service
  order-service:
    container_name: order-service
    image: kimgoetzke/practice-microservices:order-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka
    depends_on:
      api-gateway:
        condition: service_started

  # Inventory service
  inventory-service:
    container_name: inventory-service
    image: kimgoetzke/practice-microservices:inventory-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - eureka.client.serviceUrl.defaultZone=http://eureka:password@discovery-server:8761/eureka
    depends_on:
      api-gateway:
        condition: service_started